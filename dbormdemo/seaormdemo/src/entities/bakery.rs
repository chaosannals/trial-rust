//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3
use serde::{Deserialize, Serialize};
use sea_orm::entity::prelude::*;

// struct GenericDefault<const U:f64>;

// impl<const U:f64> GenericDefault<U> {
//     fn value() -> f64 {
//         U
//     }
// }

pub fn default_f64()->f64 {
    0.0
}

pub fn default_string() -> String {
    "unknown".to_string()
}

/// TODO serde default 无法被 seaorm 使用
/// 
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "bakery")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,

    #[serde(default = "default_string")]
    pub name: String,

    // #[serde(default = "GenericDefault::<0.0>::value")]
    #[serde(default = "default_f64")]
    #[sea_orm(column_type = "Double")]
    pub profit_margin: f64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::chef::Entity")]
    Chef,
}

impl Related<super::chef::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chef.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
